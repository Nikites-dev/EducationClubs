@using EducationClubs.ScaffoldedModels
@using Microsoft.EntityFrameworkCore
@using System.Threading
@using Microsoft.IdentityModel.Tokens
@inject EducationClubContext EducationClubContext
@inject DateTimeService DateTimeService
@inject NavigationManager NavigationManager

<div class="cardLesson">
    @if (ItemLesson.Count != 0)
    {
        <div class="header-card">
            <p class="day-of-week"> @DateTimeService.GetDayNameRss(ItemLesson[0].DayOfWeekId.Value)</p>
            <p class="day-of-week">@GetShortDate(ItemLesson[0].TimeStart)</p>
        </div>
        <hr class="solid">

        <div class="list-lessons">

            @foreach (var lesson in ItemLesson)
            {
                <div class="lesson-item" @onclick="@(() => @OpenLesson(lesson))">
                    <div class="box-time">
                        <div class="time-f">@GetShortTime(lesson.TimeStart)</div>
                        <div id="point">•</div>
                        <div class="time-l">@GetShortTime(lesson.TimeFinish)</div>
                    </div>
                    <div class="lesson-name">@GetLessonTitle(lesson.AdditionalClassId ?? default(int)).ToString()</div>
                    <div class="lesson-name3">
                        <MudTooltip Delay="600" Text="@getLessonTheme(lesson.Title)">
                             <MudIconButton class="lesson-name3" Style="color: rgba(43,54,116,0.39);  margin: 0; padding: 0" Icon="@Icons.Material.Filled.Help" Size="Size.Small" @onclick="() => OpenLesson(lesson)"></MudIconButton>
                        </MudTooltip>
                    </div>
                </div>
                <hr class="solid2">
            }
        </div>
    }
    else
    {
        <div class="content-empty">
            <p>Занятий на эту дату нет :(</p>
        </div>
    }
</div>

@code {

    [Parameter]
    public List<Lesson> ItemLesson { get; set; }

    [Parameter]
    public List<AdditionalClass> AddClassList { get; set; }

    String GetShortTime(DateTime? dateTime)
    {
        DateTime convertDate = (DateTime) dateTime;
        return convertDate.ToShortTimeString();
    }

    String GetShortDate(DateTime? dateTime)
    {
        DateTime convertDate = (DateTime) dateTime;
        return convertDate.ToString("dd.MM");
    }

    String GetLessonTitle(int addClassid)
    {
        return AddClassList.Where(x => x.Id == addClassid).FirstOrDefault().Title.ToString();
    }

    void OpenLesson(Lesson currentLesson)
    {
        NavigationManager.NavigateTo($"/tutor/lesson/{currentLesson.Id}");
    }

    String getLessonTheme(String theme)
    {
        if (theme.IsNullOrEmpty())
        {
            return "Тема не заполнена";
        }
        return "Тема: " + theme;
    }
}