@page "/director/main"

@using EducationClubs.ScaffoldedModels;
@using System.Globalization;
@using Microsoft.EntityFrameworkCore
@using Microsoft.IdentityModel.Tokens
@using Newtonsoft.Json.Linq
@inject EducationClubContext EducationClubContext

<HeaderMenu Title="Главная"/>
<MudPaper Style="display: flex; position: absolute; left:10%; top: 15%; align-self: center; width: 80%; height: 10%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; align-items: center; justify-content: right; border-radius: 10px;">
        <MudDatePicker Style="width: 25%; margin: 8px; " Editable="true" Date="date" ImmediateText="true" Placeholder="день.месяц.год" DateFormat="@dateFormat" TextChanged="DatePickerTextChanged" Clearable="true" />
        <div style=" margin: 5px; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; padding: 8px; border-radius: 10px;">
            <div>
                Учителя
            </div>
            <div style="text-align:center;">
                <label style="color: #658dc3">@tutors</label>
            </div>
        </div>
    <div style=" margin: 5px; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; padding: 8px; border-radius: 10px;">
            <div>
                Ученики
            </div>
            <div style="text-align:center; margin-right: 5px">
                <label style="color: #658dc3">@students</label>
            </div>
        </div>
    <div style=" margin: 5px; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; padding: 8px; border-radius: 10px">
            <div>
                Кружки
            </div>
        <div style="text-align:center; margin-right: 5px; border-radius: 10px;">
                <label style="color: #658dc3">@classes</label>
            </div>
        </div>
        
    </MudPaper>
<MudPaper Style="position: absolute; left:10%; top: 28%; align-self: center; width: 80%;  box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; text-align:center; border-radius: 10px;">
    <div>
        @if (!data.IsNullOrEmpty())
        {
            <MudText style="font-size: 24px">Сегодняшняя посещаемость занятий</MudText>
            <MudChart ChartType="ChartType.Donut" LegendPosition="Position.Bottom" Width="400px" Height="400px" InputData="@data" InputLabels="@labels">

                <CustomGraphics>

                    <text class="donut-inner-text" x="50%" y="40%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Всего отсутствовали</text>
                    <text class="donut-inner-text" x="50%" y="55%" dominant-baseline="middle" text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">@data.Sum().ToString()</text>

                </CustomGraphics>

            </MudChart>
             
        }
    </div>
</MudPaper>

@code {
    private IEnumerable<Student> ListOfStudents = new List<Student>();
    private int students;
    private IEnumerable<AdditionalClass> ListOfClasses = new List<AdditionalClass>();
    private int classes;
    private IEnumerable<Tutor> ListOfTutors = new List<Tutor>();
    private int tutors;

    DateTime? date = null;
    string dateFormat = "dd.MM.yyyy";

    public List<int> dataList = new List<int>();
    public List<string> labelsList = new List<string>();
    public string[] labels = new string[] { };
    public double[] data = new double[] { };

    protected override void OnInitialized()
    {
        ListOfStudents = EducationClubContext.Students.ToList();
        students = ListOfStudents.Count();
        ListOfClasses = EducationClubContext.AdditionalClasses.ToList();
        classes = ListOfClasses.Count();
        ListOfTutors = EducationClubContext.Tutors.ToList();
        tutors = ListOfTutors.Count();

        UpdateChart();
    }

    private void DatePickerTextChanged(string value)
    {
        if (value == null || value.Length < 6)
        {
            date = null;
        }
        else
        {
            string[] formats = { "ddMMyy", "dd.MM.yyyy", "dd.M.yyyy", "d.MM.yyyy", "d.M.yyyy", "dd.MM.yy", "dd.M.yy", "d.MM.yy", "d.M.yy" };
            if (DateTime.TryParseExact(value, formats, CultureInfo.InvariantCulture, DateTimeStyles.None, out DateTime validDate))
            {
                date = validDate;
            }
            else
            {
                date = null;
            }
        }

        FillChart();
    }

    String getInfo(String data)
    {
        if (data == "0")
        {
            return "";
        }
        return data;
    }

    private void UpdateChart()
    {
        dataList.Clear();
        labelsList.Clear();

        foreach (var cl in ListOfClasses)
        {
            List<Lesson> lessons = EducationClubContext.Lessons.Where(x => x.AdditionalClassId == cl.Id).ToList();

            if (lessons != null && date != null)
            {
                foreach (var todayLesson in lessons)
                {
                    var lessonDate = Convert.ToDateTime(todayLesson.TimeStart).Day;

                    if (Convert.ToDateTime(date).Day == lessonDate)
                    {
                        int attend = EducationClubContext.Attendences.Where(x => x.LessonId == todayLesson.Id && x.IsAttend == false).Count();
                        AdditionalClass club = EducationClubContext.AdditionalClasses.Where(x => x.Id == todayLesson.AdditionalClassId).FirstOrDefault();

                        labelsList.Add(todayLesson.Title);
                        dataList.Add(EducationClubContext.Records.Where(x => x.AdditionalClassId == club.Id && x.Active == true).Count() - attend);
                    }
                }
            }
        }

        data = dataList.ToArray().Select(Convert.ToDouble).ToArray();
        labels = labelsList.ToArray();
        
    }

    private void FillChart()
    {
        List<string> labelsList = new();
        dataList.Clear();
        labelsList.Clear();
        
        var attendance = EducationClubContext.Attendences
                .Include(x => x.Lesson)
                .ThenInclude(x => x.AdditionalClass)
                .Where(x => ((DateTime)x.Lesson.TimeStart).Date == date)
                .ToList();

        var grouped = attendance.GroupBy(x => x.Lesson.AdditionalClass.Title);

        
        
        foreach (var item in grouped)
        {
            dataList.Add(item.Count());
            labelsList.Add($"{item.Key} - {item.Count()}");
        }
        
        data = dataList.ToArray().Select(Convert.ToDouble).ToArray();
        labels = labelsList.ToArray();
        StateHasChanged();
    }
}
