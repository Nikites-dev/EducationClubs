@using System.Globalization
@using System.Reactive.Linq
@using System.Threading
@using EducationClubs.ScaffoldedModels;
@using Microsoft.EntityFrameworkCore
@using MudBlazor.Extensions
@using EducationClubs.RazorComponents.Dialogues
@inject EducationClubContext EducationClubContext
@inject NavigationManager NavigationManager
@inject IDialogService DialogService

<div class="menu-tool-lesson">
    <MudIconButton Style="background-image: linear-gradient(180deg, #ced8e3 0%, #3567bf 80%); box-shadow: rgb(38, 57, 77) 0px 3px 10px -0px; color: white; height: 40px; width: 40px; margin: 10px" Icon="@Icons.Material.Filled.KeyboardDoubleArrowLeft" @onclick="() => MoveListLessonOfWeeks(false)"></MudIconButton>
    <button @onclick="@GetListLessonOfWeeks">@GetShortDate(firstDayOfWeek)</button>
    <hr class="solid">
    <button @onclick="@GetListLessonOfWeeks">@GetShortDate(lastDayOfWeek)</button>
    <MudIconButton Style="background-image: linear-gradient(180deg, #ced8e3 0%, #3567bf 80%); box-shadow: rgb(38, 57, 77) 0px 3px 10px -0px; color: white; height: 40px; width: 40px; margin: 10px" Icon="@Icons.Material.Filled.KeyboardDoubleArrowRight" @onclick="() => MoveListLessonOfWeeks(true)"></MudIconButton>
  
</div>

@if (listLesson.Count != 0)
{
    <div class="container-lesson">
        <div class="row-v">
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(1).OrderBy(x => x.TimeStart).ToList()"/></div>
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(2).OrderBy(x => x.TimeStart).ToList()"/></div>
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(3).OrderBy(x => x.TimeStart).ToList()"/></div>
        </div>
   
        <div class="row-v">
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(4).OrderBy(x => x.TimeStart).ToList()"/></div>
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(5).OrderBy(x => x.TimeStart).ToList()"/></div>
            <div class="item"><LessonCard AddClassList="AddClassList" ItemLesson="@GetLessonsOfWeek(6).OrderBy(x => x.TimeStart).ToList()"/></div>
        </div>
    </div>
} else
{
    <div class="content-empty">
        <div class="content-empty">
            <p>Расписания на эту дату нет :(</p>
        </div>
    </div>
    @* *@
    @* <div class="container-lesson"> *@
        
        @* @{ *@
        @*     Task.Run(async () =>await ShowSkeletonBoard()); *@
        @* } *@
        
        
        @* @if (shortSkeleton) *@
        @* { *@
        @*     <div class="row-v"> *@
        @*         <div class="item"><div Style="border-radius: 20px; background-color: white; margin: 10px; width: 400px; height: 180px;"/></div> *@
        @*         <div class="item"><div Style="border-radius: 20px; background-color: white; margin: 10px; width: 400px; height: 180px;"/></div> *@
        @*         <div class="item"><div Style="border-radius: 20px; background-color: white; margin: 10px; width: 400px; height: 180px;"/></div> *@
        @*     </div> *@
        @* *@
        @* *@
        @*     <div class="row-v"> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: white; margin: 10px;" Animation="Animation.False"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: white; margin: 10px;" Animation="Animation.False"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: white; margin: 10px;" Animation="Animation.False"/></div> *@
        @*     </div> *@
        @* } *@
        @* else *@
        @* { *@
        @*     <div class="row-v"> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*     </div> *@
        @* *@
        @* *@
        @*     <div class="row-v"> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*         <div class="item"><MudSkeleton SkeletonType="SkeletonType.Rectangle" Width="400px" Height="180px" Style="border-radius: 20px; background-color: rgba(7,15,38,0.07); margin: 10px;"/></div> *@
        @*     </div> *@
        @* } *@
    // </div>
}

@code {
    [Parameter]
    public List<Lesson> listLesson { get; set; }

    [Parameter]
    public Tutor authTutor { get; set; }

    [Parameter]
    public List<AdditionalClass> AddClassList { get; set; }
    
    private int dateMove = 7;
    private DateTime crntTime = DateTime.Now;
    private DateTime firstDayOfWeek = DateTime.Now;
    private DateTime lastDayOfWeek = DateTime.Now;
    private bool shortSkeleton = true; 

    const String TUTOR_LESSON_NEW = "/tutor/lesson/new";

    protected override async Task OnInitializedAsync()
    {
        firstDayOfWeek = System.DateTime.Now.StartOfWeek(System.DayOfWeek.Monday);
        lastDayOfWeek = firstDayOfWeek.AddDays(6);
    }

    async Task MoveListLessonOfWeeks(bool isNext)
    {
        dateMove = isNext ? 7 : -7;
        firstDayOfWeek = firstDayOfWeek.AddDays(dateMove);
        lastDayOfWeek = lastDayOfWeek.AddDays(dateMove);
        
        await GetListLessonOfWeeks();
    }
    
    async Task GetListLessonOfWeeks()
    {
        listLesson = await EducationClubContext.Lessons.Where(x => 
            x.TimeStart > firstDayOfWeek &&
            x.TimeFinish < lastDayOfWeek &&
            x.AdditionalClass.Tutor.Id == authTutor.Id
            ).ToListAsync<Lesson>();
    }

    List<Lesson> GetLessonsOfWeek(int weekId)
    {
        // listLesson = listLesson.Where(x => x.DayOfWeekId == weekId).OrderBy(x => x.TimeStart).ToList();
        // return listLesson;
        
        return listLesson.Where(x => x.DayOfWeekId == weekId).ToList();
    }
    
    
    
    String GetShortTime(DateTime? dateTime)
    {
        DateTime convertDate = (DateTime) dateTime;
        return convertDate.ToShortTimeString();
    }
    
    String GetShortDate(DateTime? dateTime)
    {
        DateTime convertDate = (DateTime) dateTime;
        return convertDate.ToString("dd.MM");
    }
    
    
    async Task ShowSkeletonBoard()
    {
        long x = 0L;
        Observable
            .Interval(TimeSpan.FromSeconds(1.5))
            .Take(3)
            .Subscribe(n =>
            {
                shortSkeleton = true;
                x = n;
            }, () =>
            {
                shortSkeleton = false;
            });
    }

    private void OpenDialog()
    {
        var options = new DialogOptions { CloseOnEscapeKey = true };
        DialogService.Show<LessonAddingDialog>("", options);
        
        var s = listLesson.Count;
    }

    void OpenPage(String deeplink)
    {
        NavigationManager.NavigateTo(deeplink);
    }
}