@page "/director/clubs"

@using EducationClubs.RazorComponents.Dialogues;
@using EducationClubs.ScaffoldedModels;
@using System.Globalization;
@using Microsoft.EntityFrameworkCore;
@inject IDialogService DialogService
@inject EducationClubContext EducationClubContext
@inject ISnackbar Snackbar
@inject NavigationManager NavigationManager

<HeaderMenu Title="Кружки"/>
<MudTable Items="@Elements" Filter="new Func<AdditionalClass,bool>(FilterFuncOne)" @bind-SelectedItem="selectedItem" Style="position: absolute; left:10%; top: 15%; align-self: center; width: 80%; box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; border-radius: 10px">
    <ToolBarContent>
        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        <MudSpacer />
        <MudButton Variant="Variant.Outlined" Style="width: 23%; margin: 5px;font-size: 16px; border: 3px solid #658dc3; color: #658dc3; border-radius: 10px" @onclick="() => OpenDialog(null)">Добавить кружок</MudButton>
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Название</MudTh>
        <MudTh>Руководитель</MudTh>
        <MudTh>Просмотреть</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Название">@context.Title</MudTd>
        <MudTd DataLabel="Руководитель">@EducationClubContext.Tutors.Where(x => x.Id == context.TutorId).FirstOrDefault().Surname @EducationClubContext.Tutors.Where(x => x.Id == context.TutorId).FirstOrDefault().Name @EducationClubContext.Tutors.Where(x => x.Id == context.TutorId).FirstOrDefault().Patronymic</MudTd>
        <MudTd DataLabel="Просмотреть"><MudButton Variant="Variant.Outlined" Style="font-size: 16px; border: 2px solid #658dc3; color: #658dc3; border-radius: 8px" @onclick="() => OpenDialog(context)">Просмотр</MudButton></MudTd>
    </RowTemplate>
    <PagerContent>
        <MudTablePager PageSizeOptions="new int[] { 5 }" />
    </PagerContent>
</MudTable>

<MudDialog Class="content" @bind-IsVisible="visible" Options="closeButton">
    <TitleContent>
        @if (club == null)
        {
            <MudText Style="font-size: 18px">
                Добавление кружка:
            </MudText>
        }
        else
        {
            <MudText Style="font-size: 18px">
                Кружок:
            </MudText>
        }
    </TitleContent>
    <DialogContent>
        <div class="box-content-row">
            <div class="box-horizontal">
                <MudIcon Icon="@Icons.Material.Filled.MenuBook" Color="Color.Dark" />
                <p>Наименование:<span class="required"> *</span></p>
            </div>
            <MudTextField T="String" Variant="Variant.Outlined" Style="font-size: 16px; margin: 0; margin-bottom: 10px" @bind-Value="@title" />
        </div>
        <div class="box-content-row">
            <div class="box-horizontal">
                <MudIcon Icon="@Icons.Material.Filled.Person" Color="Color.Dark" />
                <p>Учитель:<span class="required"> *</span></p>
            </div>

            <MudSelect T="String" @bind-Value="@tutor" Variant="Variant.Outlined" Style="font-size: 16px; margin: 0; margin-bottom: 10px">
                @foreach (var tutor in Tutors)
                {
                    <MudSelectItem Value="@tutor.Id.ToString()">
                        @tutor.Surname @tutor.Name @tutor.Patronymic
                    </MudSelectItem>
                }
            </MudSelect>
        </div>
    </DialogContent>
    <DialogActions>
        <div style="align-items: center; display: inline-block">
            <MudButton Variant="Variant.Outlined" Style="margin: 5px; font-size: 16px; border: 2px solid #658dc3; color: #658dc3; border-radius: 10px" @onclick="AddingNewClub">Сохранить</MudButton>
            @if (club != null)
            {
                <MudButton Variant="Variant.Outlined" Style="margin: 5px; font-size: 16px; border: 2px solid #658dc3; color: #658dc3; border-radius: 10px" @onclick="DeleteClub">Удалить</MudButton>
            }
            <MudButton Variant="Variant.Outlined" Style="margin: 5px; font-size: 16px; border: 2px solid #658dc3; color: #658dc3; border-radius: 10px" @onclick="Close">Закрыть</MudButton>
        </div>
    </DialogActions>
</MudDialog>



@code {
    private IEnumerable<Tutor> Tutors = new List<Tutor>();
    string tutorId;
    string title;
    string tutor;
    private bool visible;
    AdditionalClass club;
    private string searchString = "";
    private AdditionalClass selectedItem = new AdditionalClass();
    private HashSet<AdditionalClass> selectedItems = new HashSet<AdditionalClass>();
    private DialogOptions closeButton = new DialogOptions { CloseOnEscapeKey = false, CloseButton = false };


    private IEnumerable<AdditionalClass> Elements = new List<AdditionalClass>();

    protected override async Task OnInitializedAsync()
    {
        Elements = await EducationClubContext.AdditionalClasses.Where(x => x.IsActive == true).ToListAsync();
        Tutors = await EducationClubContext.Tutors.ToListAsync();
    }

    private void OpenDialog(AdditionalClass additionalClass)
    {
        if (club == null && additionalClass != null)
        {
            club = additionalClass;
            title = club.Title;
            tutor = club.TutorId.ToString();
        }
        else
        {
            club = null;
            title = null;
            tutor = null;
        }

        visible = true;
    }

    private bool FilterFuncOne(AdditionalClass element) => FilterFunc(element, searchString);

    private bool FilterFunc(AdditionalClass element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (EducationClubContext.Tutors.Where(x => x.Id == element.TutorId).FirstOrDefault().Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private void Close()
    {
        club = null;
        visible = false;
    }

    void DeleteClub()
    {
        club.IsActive = false;
        EducationClubContext.ChangeTracker.Clear();
        EducationClubContext.AdditionalClasses.Update(club);
        EducationClubContext.SaveChanges();
        EducationClubContext.ChangeTracker.Clear();
        Snackbar.Add("Кружок успешно удален!", Severity.Success);
        visible = false;
        club = null;
        Elements = EducationClubContext.AdditionalClasses.Where(x => x.IsActive == true).ToList();
    }

    void AddingNewClub()
    {
        if (title != null && tutor != null)
        {
            if (club == null)
            {
                if (EducationClubContext.AdditionalClasses.Where(x => x.Title == title).FirstOrDefault() == null)
                { 
                    AdditionalClass newClub = new AdditionalClass()
                    {
                        Title = title,
                        IsActive = true,
                        TutorId = int.Parse(tutor)
                    };

                    EducationClubContext.AdditionalClasses.Add(newClub);
                    EducationClubContext.SaveChanges();
                    EducationClubContext.Entry(newClub).State = EntityState.Detached;
                    Snackbar.Add("Кружок успешно добавлен!", Severity.Success);
                    visible = false;
                    Elements = EducationClubContext.AdditionalClasses.Where(x => x.IsActive == true).ToList();
                }
                else
                {
                    Snackbar.Add("Такой кружок уже существует", Severity.Warning);
                }
            }
            else
            {
                club.Title = title;
                club.TutorId = int.Parse(tutor);
                EducationClubContext.AdditionalClasses.Update(club);
                EducationClubContext.SaveChanges();
                Snackbar.Add("Кружок успешно изменен!", Severity.Success);
                visible = false;
                club = null;
                NavigationManager.NavigateTo("/director/clubs");
            }
        }
    }
}