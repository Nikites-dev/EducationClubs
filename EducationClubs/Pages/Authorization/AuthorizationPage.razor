@page "/"
@using EducationClubs.ScaffoldedModels
@using Microsoft.EntityFrameworkCore
@using MudBlazor
@using System.ComponentModel.DataAnnotations
@using Microsoft.IdentityModel.Tokens
@inject EducationClubContext educationClubContext
@inject NavigationManager NavigationManager
@inject ISnackbar Snackbar
@inject AppGeneralSettings _appGeneralSettings

<style>
    .mainBlock {
        display: flex;
        box-shadow: rgb(38, 57, 77) 0px 20px 30px -10px; 
        position: absolute;
        left: 20%;
        align-self: center;
        width: 60%;
        opacity: 1;
        mix-blend-mode: normal;
        background-color: rgba(255, 255, 255, 1);
        align-items: center;
        justify-content: center;
        border-radius: 30px;    
        height: 70%;
    }
</style>

<div class="content">
    <MudPaper class="mainBlock">
        <div style="flex: 50%; padding: 3%; align-self: center">
            <div style="text-align: center">
                <MudText Style=" font-family: 'Mongolian Baiti'; font-size: 24px;">
                    АВТОРИЗАЦИЯ
                </MudText>
            </div>
            <br />
            <br />
            <MudText Style=" font-family: 'Mongolian Baiti'; margin: 0">
                Логин
            </MudText>
            <MudTextField T="String" Variant="Variant.Text" @bind-Value="model.Email" For="@(() => model.Email)" />
            <br />
            <MudText Style=" font-family: 'Mongolian Baiti'; margin: 0">
                Пароль
            </MudText>
            <MudTextField T="String" InputType="InputType.Password" Variant="Variant.Text" Style="font-size: 16px; margin: 0" @bind-Value="@password" />
            <br />
            <br />
            <br />
            
            <MudButton Variant="Variant.Outlined" Style="width: 40%; font-size: 16px; border: 3px solid #658dc3; color: #658dc3; border-radius: 10px;" Class="d-flex mx-auto" @onclick="@Auth">Войти</MudButton>
            
        </div>
        <div style="flex: 50%; text-align: center;">
            <MudImage src='/images/Image4.png' style="width:90%; object-fit: fill; overflow:hidden; flex: 50%; border-radius: 30px;"></MudImage>
        </div>
    </MudPaper>
    @if (showLoader)
    {
        <MudProgressCircular Color="Color.Primary" Style="height:70px;width:70px;" Indeterminate="true" />   
    }
</div>
@code {
    private String password;
    private bool showLoader = false;
    private bool isDbConnect = false;
    private Tutor tutor = new Tutor();

    RegisterAccountForm model = new RegisterAccountForm();
    
    public class RegisterAccountForm
    {
        [Required]
        [EmailAddress]
        public string Email { get; set; }
    }
    
    protected override async Task OnInitializedAsync()
    {
        initSnakebarPosition(Defaults.Classes.Position.BottomCenter);
    }

    async Task CheckServerConnection()
    {
        showLoader = true;
        try
        {
         var availableRole = await educationClubContext.Roles.FirstOrDefaultAsync(x => x.Id == 1);

            if (availableRole != null)
            {
                isDbConnect = true;
            }
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            isDbConnect = false;
            ShowAlert("Сервер БД недоступен");
        }
        showLoader = false;
    }

    void initSnakebarPosition(string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
    }

    private async Task Auth()
    {
        if (model.Email.IsNullOrEmpty() || password.IsNullOrEmpty())
        {
            ShowAlert("Заполните все поля!");
            return;
        }

        if (!IsValidEmail(model.Email))
        {
            ShowAlert("Некорректный email!");
            return;
        }

        await CheckServerConnection();
        Account accountDb = null;
        
        try
        {
            if (!isDbConnect)
            {
               return;
            }
            accountDb = await educationClubContext.Accounts.FirstOrDefaultAsync(x => x.Login == model.Email && x.Password == password);   
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
        
        if (accountDb == null)
        {
            ShowAlert("Пользователь не существует");
            showLoader = false;
            return;
        }

        _appGeneralSettings.authAccount = accountDb;

        if (accountDb.RoleId == 2)
        {
            await GetTutor();
            _appGeneralSettings.AuthTutor = tutor;

            if (tutor.Id != 0 && tutor.IsWorking == true)
            {
                NavigationManager.NavigateTo("/tutor/main");
            }
            else
            {
                ShowAlert("У пользователя нет доступа");
            }
        }
        else
        {
            NavigationManager.NavigateTo("/director/main");
        }
    }

    public bool IsValidEmail(string source)
    {
        return new EmailAddressAttribute().IsValid(source);
    }
    
    async Task GetTutor()
    {
        tutor = await educationClubContext.Tutors.FirstOrDefaultAsync(x => x.AccountId.Value == _appGeneralSettings.authAccount.Id);
    }

    void ShowAlert(String message)
    {
        Snackbar.Clear();
        Snackbar.Add(message, Severity.Error, config => { config.ShowCloseIcon = false; });
    }
}