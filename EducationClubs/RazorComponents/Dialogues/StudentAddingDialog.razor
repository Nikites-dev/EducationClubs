@using EducationClubs.ScaffoldedModels;
@using System.Globalization;
@using System.IO
@using Firebase.Storage
@using Microsoft.EntityFrameworkCore
@inject EducationClubContext EducationClubContext
@inject ISnackbar Snackbar
@inject IDialogService DialogService

<style>
    .content {
        background: #ffffff;
        height: 550px;
        width: 60%;
        border: #dce1e6 solid 1px;
        border-radius: 20px;
        -webkit-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);
        -moz-box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);
        box-shadow: 0px 5px 10px 2px rgba(34, 60, 80, 0.2);
    }
</style>

<MudDialog Class="content" >
    <TitleContent>
        <div class="box-title">
            <p class="content-title">Добавление занятия</p>
        </div>
    </TitleContent>
    <DialogContent>
        
        <MudTable @ref="_table" T="Student" Items="@Elements" Filter="new Func<Student,bool>(FilterFuncOne)" @bind-SelectedItem="selectedItem" @bind-SelectOnRowClick="@_selectOnRowClick" Hover="true" OnRowClick="@OnRowClick">
            <ToolBarContent>
                <MudSpacer />
                <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Фамилия</MudTh>
                <MudTh>Имя</MudTh>
                <MudTh>Отчество</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Surname">@context.Surname</MudTd>
                <MudTd DataLabel="Name">@context.Name</MudTd>
                <MudTd DataLabel="Patronymic">@context.Patronymic</MudTd>
            </RowTemplate>
            <PagerContent>
                <MudTablePager PageSizeOptions="new int[] { 5 }" />
            </PagerContent>
        </MudTable>
    </DialogContent>
</MudDialog>

@code {
    private string searchString = "";
    private Student selectedItem = new Student();
    private IEnumerable<Student> Elements = new List<Student>();
    private HashSet<Student> selectedItems = new HashSet<Student>();
    private bool IsAdded = false;
    private bool _selectOnRowClick = true;
    private MudTable<Student> _table;

    [Parameter]
    public string? lessonId { get; set; }

    private bool FilterFuncOne(Student element) => FilterFunc(element, searchString);

    protected override async Task OnInitializedAsync()
    {
        Elements = EducationClubContext.Students.ToList();
        initSnakebarPosition(Defaults.Classes.Position.BottomCenter);
    }

    private bool FilterFunc(Student element, string searchString)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Surname.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    void initSnakebarPosition(string position)
    {
        Snackbar.Clear();
        Snackbar.Configuration.PositionClass = position;
    }

    async Task OnRowClick(TableRowClickEventArgs<Student> args)
    {
        var result = await DialogService.Show<ConfirmDialog>($"Добавить этого ученика? {selectedItem.Surname} {selectedItem.Name} {selectedItem.Patronymic}").Result;

        if (!result.Canceled)
        {
            var newAttendence = new Attendence()
            {
                StudentId = selectedItem.Id,
                LessonId = int.Parse(lessonId),
                IsAttend = false
            };

            await EducationClubContext.Attendences.AddAsync(newAttendence);
            await EducationClubContext.SaveChangesAsync();

            Snackbar.Add("Ученик успешно добавлен!", Severity.Success, config => { config.ShowCloseIcon = false; });
        }
    }

    async Task AddStudent()
    {
        try
        {
            
        }
        catch
        {
            
        }

        //if (surname != "" || name != "" ||
        //login != "" || password != "" || currentAdditionalClass != "")
        //{
        //    var newTutor = new Tutor()
        //        {
        //            Surname = surname,
        //            Name = name,
        //            Patronymic = patronymic,
        //            IsWorking = true
        //        };

        //    var newAccount = new Account()
        //        {
        //            Login = login,
        //            Password = password,
        //            RoleId = EducationClubContext.Roles.Where(x => x.Title == "Учитель").FirstOrDefault().Id
        //        };

        //    newAccount.Tutors.Add(newTutor);
        //    await EducationClubContext.Accounts.AddAsync(newAccount);
        //    await EducationClubContext.Tutors.AddAsync(newTutor);
        //    await EducationClubContext.SaveChangesAsync();

        //    var currentAClass = EducationClubContext.AdditionalClasses.Where(x => x.Title == currentAdditionalClass).FirstOrDefault();
        //    currentAClass.TutorId = newTutor.Id;

        //    EducationClubContext.AdditionalClasses.Update(currentAClass);
        //    await EducationClubContext.SaveChangesAsync();

        //    Snackbar.Add("Учитель успешно добавлен!", Severity.Success, config => { config.ShowCloseIcon = false; });
        //}
        //else
        //{
        //    Snackbar.Add("Для добавления все Обязательные поля должны быть заполнены!", Severity.Error, config => { config.ShowCloseIcon = false; });
        //}
    }
}