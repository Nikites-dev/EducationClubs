@page "/tutor/profile"

@using EducationClubs.ScaffoldedModels;
@using System.Globalization;
@using System.IO
@using Firebase.Storage
@using Microsoft.EntityFrameworkCore
@inject EducationClubContext EducationClubContext
@inject BehaviourService BehaviourService

<style type="text/css">
    .mainblock {
        display: flex;
        flex-direction: row;
        height: 100%;
        justify-content: center;
        align-items: center;
    }
</style>
@if (isHeadermenuInit)
{
    <HeaderMenu/>    
}

@if (_additionalClasses.Count() != 0 && CurrentTutor.Id != 0)
{
    <MudPaper Style="position: absolute; left:15%; top: 20%; width: 70%; height: 70%;  box-shadow: rgb(38, 57, 77) 0px 5px 10px -0px; ">
    <div class="mainblock"> 
        <div style="flex: 50%; text-align: center;">
            @if (imgUrl != null || imgUrl != "")
            {
                <MudAvatar Style="height:300px; width:300px; font-size:2rem; background-color: white" Image="@imgUrl"></MudAvatar>   
            }
            else
            {
                <MudAvatar Style="height:300px; width:300px; font-size:2rem;" Color="Color.Dark"></MudAvatar>   
            }
        </div>
        <div style="flex: 50%; margin: 10px">
            <div style="display: inline-flex; ">
                <MudText Style="font-size: 24px; margin: 10px;">Фамилия</MudText>
                <MudTextField @bind-Value="CurrentTutor.Surname" Variant="Variant.Outlined" Style="border: solid 1px #869E9E; height:30px; margin: 10px 10px 10px 50px;" />
            </div>
            <div style="display: inline-flex;">
                <MudText Style="font-size: 24px; margin: 10px;">Имя</MudText>
                <MudTextField @bind-Value="CurrentTutor.Name" Variant="Variant.Outlined" Style="border: solid 1px #869E9E; height:30px; margin: 10px 10px 10px 107px;" />
            </div>
            <div style="display: inline-flex;">
                <MudText Style="font-size: 24px; margin: 10px;">Отчество</MudText>
                <MudTextField @bind-Value="CurrentTutor.Patronymic" Variant="Variant.Outlined" Style="border: solid 1px #869E9E; height:30px; margin: 10px 10px 10px 49px;" />
            </div>
            <div>
                <MudText Style="font-size: 24px; margin: 30px 10px 10px 10px;">Список кружков</MudText>
                <div style="overflow: scroll; height: 100px">
                    <MudTable Items="@_additionalClasses" Hover="true">
                        <RowTemplate>
                            <MudTd DataLabel="Title">@context.Title</MudTd>
                        </RowTemplate>
                    </MudTable>
                </div>
            </div>
        </div>
        
        <MudFileUpload T="IBrowserFile" FilesChanged="UploadFiles">
            <ButtonTemplate>
                <MudIconButton HtmlTag="label"
                               Color="Color.Info"
                               Icon="@Icons.Material.Filled.PhotoCamera"
                               for="@context">
                </MudIconButton>
            </ButtonTemplate>
        </MudFileUpload>
    </div>
</MudPaper>
}


@code {
    private Tutor CurrentTutor { get; set; }
    private IEnumerable<AdditionalClass> _additionalClasses = new List<AdditionalClass>();
    private bool isHeadermenuInit = false;
    private bool isContentInit = false;
    private String? imgUrl = "";
    
    IList<IBrowserFile> files = new List<IBrowserFile>();
    private async Task UploadFiles(IBrowserFile file)
    {
        // files.Add(file);

        await Upload(file);
        imgUrl =  await GetImage(CurrentTutor.Id.ToString());
    }
    
    protected override async Task OnInitializedAsync()
    {
        CurrentTutor = BehaviourService.AuthTutor;
        await GetAdditionalClass();
        isHeadermenuInit = true;

        imgUrl =  await GetImage(CurrentTutor.Id.ToString());
    }

    async Task GetAdditionalClass()
    {
        _additionalClasses = await EducationClubContext.AdditionalClasses.Where(xo => xo.TutorId == CurrentTutor.Id).ToListAsync();
    }
    
    async Task Upload(IBrowserFile file)
    {
        try
        {
            var task = new FirebaseStorage("flutterapp-63c02.appspot.com")
                .Child("data")
                .Child("random")
                .Child(CurrentTutor.Id.ToString() + ".png")
                .PutAsync(file.OpenReadStream());
        
            task.Progress.ProgressChanged += (s, e) => Console.WriteLine($"Progress: {e.Percentage} %");
            
            var downloadUrl = await task;
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
        }
    }

    
    async Task<string> GetImage(String fileName)
    {
        Task<string> task;
        
        try
        {
            task = new FirebaseStorage("flutterapp-63c02.appspot.com")
                .Child("data")
                .Child("random")
                .Child(fileName + ".png") // 
                .GetDownloadUrlAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            return null;  
        }

        return await task;
    }
}